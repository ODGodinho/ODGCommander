import { type EventListenerInterface } from "@odg/events";
import { LoggerInterface } from "@odg/log";
import { inject } from "inversify";
import { fluentProvide } from "inversify-binding-decorators";

import { type EventBrowserParameters, type EventTypes } from "#types/EventsInterface";
import { ContainerName, EventName } from "@enums";
import { PageOrHandlerFactoryType } from "@factory/PageOrHandlerFactory";
import { {{ EventName:UCFirst }}Page } from "@pages/{{ EventName:UCFirst }}Page";

@ContainerHelper.registerListener(EventName.{{ EventName:UCFirst }}PageEvent, ContainerName.{{ EventName:UCFirst }}EventListener, {})
@(fluentProvide(ContainerName.{{ EventName:UCFirst }}EventListener).inSingletonScope().done())
export class {{ EventName:UCFirst }}EventListener implements EventListenerInterface<EventTypes, EventName.{{ EventName:UCFirst }}PageEvent> {

    public constructor(
        @inject(ContainerName.Logger) public readonly log: LoggerInterface,
        @inject(ContainerName.{{ EventName:UCFirst }}PageFactory) public readonly {{ EventName:LCFirst }}PageFactory: PageOrHandlerFactoryType<{{ EventName:UCFirst }}Page>,
    ) {
    }

    public async handler({ page }: EventBrowserParameters): Promise<void> {
        await this.log.debug("{{ EventName:UCFirst }}EventListener is sended");

        await this.{{ EventName:LCFirst }}PageFactory(page)
            .execute();
    }

}
